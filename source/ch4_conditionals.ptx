<?xml version="1.0"?>

<!-- Generated by Docutils 0.19 -->
<chapter xml:id="conditionals">
    <title>Conditionals</title>

    <section xml:id="simple-if">
        <title>Using the Simple <c>if</c> Statement</title>
        <p><idx>conditional statements</idx>
            Conditional statements in Python and Java are very similar.
            In Python we have three patterns:
        </p>
    

        <p>
            In Python the simple <c>if</c> statement is written as:
        </p>

        <program interactive="activecode" language="python">
            <code>
score = 95
if score &gt;= 90:
    print("Excellent work!")
            </code>
        </program>
        <p>
            In Java, this same pattern requires two changes: the condition must be in parentheses <c>()</c>, and the code block must be enclosed in curly braces <c>{}</c>.
        </p>
        <program interactive="activecode" language="java">
            <code>
            public class SimpleIfExample {
                public static void main(String[] args) {
                    int score = 70;
                    if (score &lt;= 70) {
                        System.out.println("Needs work!");
                    }
                }
            }
            </code>
        </program>
        <p>
            Once again you can see that in Java the curly braces define a block rather than indentation.
            In Java the parenthesis around the condition are required because it is technically a function that evaluates to <c>True</c> or <c>False</c>.
        </p>
    </section>

    <section xml:id="if-else">
        <title>Using the <c>if</c> - <c>else</c> Statement</title>

            <p>The Java equivalent follows the same syntactical rules as before.</p>
        <program interactive="activecode" language="python">
            <code>
            age = 16
            if age &gt;= 18:
                print("You can vote.")
            else:
                print("You are not yet eligible to vote.")
            </code>
            </program>

        <program language="java">
            <code>
        public class IfElseExample {
            public static void main(String[] args) {
                int age = 16;
                if (age &gt;= 18) {
                    System.out.println("You can vote.");
                } else {
                    System.out.println("You are not yet eligible to vote.");
                }
            }
        }
            </code>
        </program>
    </section>

    <section xml:id="elif">
        <title>Can we use <c>elif</c>?</title>

        <p><idx><c>elif</c> statement</idx>
            Java does not have an <c>elif</c> pattern like Python.
            In Java you can get the functionality of an <c>elif</c> statement by nesting <c>if</c> and <c>else</c>.
            Here is a simple example in both Python and Java.
        </p>


        <program interactive="activecode" language="python">
            <code>
grade = int(input('enter a grade'))
if grade &lt; 60:
    print('F')
elif grade &lt; 70:
    print('D')
elif grade &lt; 80:
    print('C')
elif grade &lt; 90:
    print('B')
else:
    print('A')
            </code> <tests> </tests>
        </program>

        <p>
In Java we have a couple of ways to write this.
        </p>


        <program interactive="activecode" language="java">
            <code>
public class ElseIf {
    public static void main(String args[]) {
     int grade = 85;
     if (grade &lt; 60) {
         System.out.println('F');
     } else {
         if (grade &lt; 70) {
             System.out.println('D');
         } else {
             if (grade &lt; 80) {
                 System.out.println('C');
             } else {
                 if (grade &lt; 90) {
                     System.out.println('B');
                 } else {
                     System.out.println('A');
                 }
             }
         }
     }
   }
 }
            </code> <tests> </tests>
        </program>

        <p>
We can get even closer to the <c>elif</c> statement by taking advantage of the Java rule that a single statement does not need to be enclosed in curly braces. Since the if is the only statement used in each else we can get away with the following.
        </p>



        <program interactive="activecode" language="java">
            <code>
public class ElseIf {
    public static void main(String args[]) {
     int grade = 85;
     if (grade &lt; 60) {
         System.out.println('F');
     } else if (grade &lt; 70) {
         System.out.println('D');
     } else if (grade &lt; 80) {
         System.out.println('C');
     } else if (grade &lt; 90) {
         System.out.println('B');
     } else  System.out.println('A');
    }
}
            </code> <tests> </tests>
        </program>
    </section>

    <section xml:id="switch">
        <title>Using the <c>switch</c> Statement</title>

        <p>
Java also supports a <c>switch</c> statement that acts something like the <c>elif</c> statement of Python under certain conditions. To write the grade program using a <c>switch</c> statement we would use the following:
        </p>

        <note>
            <p>
                Depending on your knowledge and experience with Python you may already be familiar and questioning why we are not using the <c>match</c> statement in our Python examples. The answer is that this book currently runs its active code examples on Python 3.7, which does not support the <c>match</c> statement. The <c>match</c> statement was introduced in Python 3.10. Below is an example of the <c>match</c> statement similar to our grade method.
            </p>
                    <program language="python">
            <title>Match Case Example</title>
            <code>
                grade = 100 // 10
                def grading(grade):
                    match grade:
                        case 10 | 9:
                            return 'A'
                        case 8:
                            return 'B'
                        case 7:
                            return 'C'
                        case 6:
                            return 'D'
                        case _:
                            return 'F'
                print(grading(grade))
            </code>
        </program>
        </note>

        <p><idx><c>switch</c></idx>
            The <c>switch</c> statement in Java provides a clean and efficient alternative to chaining multiple <c>if-else</c> conditions, especially when comparing a single variable against several constant values. It supports a variety of data types, including primitive types (<c>byte</c>, <c>short</c>, <c>char</c>, <c>int</c>), their wrapper classes, <c>enumerations</c>, and <c>String</c> (introduced in Java 7). Each <c>case</c> within a <c>switch</c> must be defined using a constant expression, and duplicate <c>case</c> values are not permitted. By default, control flow "<c>falls through</c>" from one <c>case</c> to the next unless a <c>break</c>, <c>return</c>, or <c>throw</c> statement is used to terminate execution. 
        </p>
        <p><idx><c>switch</c> expressions</idx>
            Java 14 introduced <c>switch</c> <term>expressions</term>, enhancing functionality by allowing the <c>switch</c> to return values and eliminating <c>fall-through</c> via the <c>-&gt;</c> arrow syntax. These expressions can even use <c>yield</c> within code blocks for more complex evaluations. Itâ€™s important to note that traditional <c>switch</c> statements do not support <c>null</c> values and will throw a <c>NullPointerException</c> if evaluated with <c>null</c>. As the language evolves, newer versions of Java continue to extend <c>switch</c> capabilities with features like <c>pattern matching</c> and enhanced <c>type handling</c>, making it a more powerful and expressive tool for decision-making in Java programs.
        </p>





        <program interactive="activecode" language="java">
            <code>
public class SwitchUp {
    public static void main(String args[]) {
     int grade = 85;
     int tempgrade = grade / 10;
     switch(tempgrade) {
     case 10:
     case 9:
         System.out.println('A');
         break;
     case 8:
         System.out.println('B');
         break;
     case 7:
         System.out.println('C');
         break;
     case 6:
         System.out.println('A');
         break;
     default:
         System.out.println('F');
     }
   }
 }
            </code> <tests> </tests>
        </program>

        <p>
The <c>switch</c> statement is not used very often, and we recommend you do not use it. First, it is not as powerful as the <c>else if</c> model because the switch variable can only be compared for equality with an integer or enumerated constant. Second, it is very easy to forget to put in the <c>break</c> statement, so it is more error-prone. If the break statement is left out then then the next alternative will be automatically executed. For example, if the grade was 95 and the <c>break</c> was omitted from the <c>case 9:</c> alternative then the program would print(out both A and B.)
        </p>
    </section>

                                                             <section xml:id="exception-handling">
        <title>Exception Handling</title>
        
        <p>
            Errors and bugs when writing programs are nearly impossible to avoid. As a programmer, you may have spent a considerable amount of time debugging code. Sometimes, even when we have done everything right and ensured a program will function as it is intended to, errors are still unavoidable especially when user input is necessary. 
        </p>

        <p>
            Let's look at an example of code that may lead to user error. This Java program will ask the user to input the year they were born. It will then tell them how old they will be in the year 2050. We will use the <c>Scanner</c> class from the <c>util</c> library to ask the user for input.
        </p>

        <program interactive="activecode" language="java" xml:id="age-2050-calculator">
            <code>
            import java.util.Scanner;

            public class Main
            {
                public static void main(String[] args) {
                    
                    // Update to current year if needed
                    int current_year = 2025; 
                    
                    // Scanner object is created to get input
                    Scanner userInput = new Scanner(System.in);  
                    System.out.println("Enter your age: ");
                
                    // Reads user input
                    int age = Integer.parseInt(userInput.nextLine());
                    
                    // Arithmatic to find age in 2050
                    int birth_year = current_year - age;
                    int age_in_2050 = 2050 - birth_year;
                    
                    System.out.println("Your age in 2050 will be " + age_in_2050);
                }
            }
            </code>
        </program>

        <p>
            This program seems to work pretty well. The user can enter their age and get the desired result. Large numbers such as 10,000 and negative numbers such as -75 work fine with this program, meaning we have accommodated both vampires and time travelers! Despite this, our program can still run into issues. You may have noticed that the <c>age</c> variable is an integer. What happens if a user takes into account that their birthday was six months ago and types <c>20.5</c> into the console? What happens if the user spells out their age and types <c>twelve</c> instead of <c>12</c>? Try these two inputs and see what happens!
        </p>
        
    </section>

    <section xml:id="boolean-operators">
        <title>Boolean Operators</title>

        <p><idx>Boolean operators</idx>
The conditionals used in the if statement can be Boolean variables, simple comparisons, and compound Boolean expressions.
        </p>

<p><idx>ternary operator</idx>
Java also supports the <c>boolean</c> expression using the ternary operator 
<c>condition ? trueValue : falseValue</c>. This operator tests a condition as part 
of an assignment statement. The following table summarizes how this works:
</p>

<table>
  <title>Ternary Operator in Java</title>
  <tabular>
    <row>
      <cell><term>Component</term></cell>
      <cell><term>Description</term></cell>
    </row>
    <row>
      <cell><c>condition</c></cell>
      <cell>The Boolean expression that is evaluated (e.g., <c>a % 2 == 0</c>).</cell>
    </row>
    <row>
        <cell><c>?</c></cell>
        <cell> This is the ternary operator that separates the condition from the <c>trueValue</c>.</cell>
    </row>
    <row>
      <cell><c>trueValue</c></cell>
      <cell>The value assigned if the condition is true (e.g., <c>a * a</c>).</cell>
    </row>
    <row>
        <cell><c>:</c></cell>
        <cell> This is the ternary operator that separates the <c>trueValue</c> from the <c>falseValue</c>.</cell>
    </row>
    <row>
      <cell><c>falseValue</c></cell>
      <cell>The value assigned if the condition is false (e.g., <c>3 * x - 1</c>).</cell>
    </row>
    <row>
      <cell>Example Usage</cell>
      <cell><c>a = a % 2 == 0 ? a * a : 3 * x - 1</c></cell>
    </row>
    <row>
      <cell>Equivalent if-else Code</cell>
      <cell>Can also be written with a regular <c>if-else</c> statement, but the ternary form is more concise.</cell>
    </row>
  </tabular>
</table>

<p>
Using this operator can make code shorter and more readable in cases where a simple conditional assignment is needed.
</p>
        <program interactive ="activecode" language ="java">
            <code>
                class Main {
                        public static void main(String[] args) {
                        int a = 4;
                        int x = 2;

                        // Using the ternary operator
                        a = (a % 2 == 0) ? a * a : 3 * x - 1;

                        System.out.println("Result: " + a);
                    }
                }
                  
            </code>
        </program>

        <p>
            In this example we are using this ternary operator to assign a value to <c>a</c> based on whether <c>a</c> is even or odd. If <c>a</c> is even, it will be squared; if odd, it will be instead be calculated as <c>3 * x - 1</c>. This is a concise way to write conditional assignments in Java. However, it should be used reasonably, as it can make code less readable if overused or used in complex expressions.
        </p>


    </section>
        <section xml:id="chapter4_summary">
        <title>Summary &amp; Reading Questions</title>
        <p><ol label="1">
            <li>
                <p>Java requires parentheses around the condition and curly braces for code blocks in <c>if</c> statements, unlike Python which uses indentation alone.</p>
            </li>
            <li>
                <p>Java uses <c>else if</c> instead of Python's <c>elif</c>, and allows optional curly braces for single-line blocks. However, it is considered good practice to use curly braces even for single-line blocks to improve readability.</p>
            </li>
            <li>
                <p>
                    Java's <c>switch</c> statement is similar to Python's <c>match</c> statement, but it only supports equality checks against constant values and does not evaluate relational expressions like greater than or less than.
                </p>
            
            </li>
            <li>
                <p>
                    Java uses the <c>boolean</c> data type to represent logical values <c>true</c> or <c>false</c>, commonly used in conditionals and control flow.
                </p>
            </li>
        </ol></p>
        <reading-questions xml:id="rqs-summary4">
            <exercise label="summary-if-parentheses">
                <statement>
                    <p>Which is a correct Java <c>if</c> statement syntax?</p>
                </statement>
                <choices>
                    <choice correct="yes">
                        <statement>
                            <p>if (x &gt; 0) { System.out.println("Positive"); }</p>
                        </statement>
                        <feedback>
                            <p>Correct! Java requires parentheses and curly braces.</p>
                        </feedback>
                    </choice>
                    <choice>
                        <statement>
                            <p>if x &gt; 0: print("Positive")</p>
                        </statement>
                        <feedback>
                            <p>No, that's Python syntax, not Java.</p>
                        </feedback>
                    </choice>
                    <choice>
                        <statement>
                            <p>if x &gt; 0 { System.out.println("Positive"); }</p>
                        </statement>
                        <feedback>
                            <p>No, Java requires parentheses around the condition.</p>
                        </feedback>
                    </choice>
                    <choice>
                        <statement>
                            <p>if (x &gt; 0) print("Positive");</p>
                        </statement>
                        <feedback>
                            <p>No, <c>print</c> is not a valid method in Java. Use <c>System.out.println</c>.</p>
                        </feedback>
                    </choice>
                </choices>
            </exercise>
            <exercise label="summary-else-if">
                <statement>
                    <p>How do you write Pythonâ€™s <c>elif</c> equivalent in Java?</p>
                </statement>
                <choices>
                    <choice>
                        <statement>
                            <p>elif (score &gt; 90)</p>
                        </statement>
                        <feedback>
                            <p>No, <c>elif</c> is used in Python, not Java.</p>
                        </feedback>
                    </choice>
                    <choice>
                        <statement>
                            <p>else: if (score &gt; 90)</p>
                        </statement>
                        <feedback>
                            <p>Incorrect syntax; no colon in Java and not the right structure.</p>
                        </feedback>
                    </choice>
                    <choice correct="yes">
                        <statement>
                            <p>else if (score &gt; 90)</p>
                        </statement>
                        <feedback>
                            <p>Right! Java uses <c>else if</c>.</p>
                        </feedback>
                    </choice>
                    <choice>
                        <statement>
                            <p>ifelse (score &gt; 90)</p>
                        </statement>
                        <feedback>
                            <p>No, <c>ifelse</c> is not a valid construct in Java.</p>
                        </feedback>
                    </choice>
                </choices>
            </exercise>
            <exercise label="summary-switch-limitation">
                <statement>
                    <p>What is one limitation of Java's <c>switch</c> statement, including in its modern versions?</p>
                </statement>
                <choices>
                    <choice>
                        <statement>
                            <p>It cannot evaluate relational expressions like greater than or less than.</p>
                        </statement>
                        <feedback>
                            <p>No, while <c>switch</c> can compare values, it does not support relational expressions like <c>&gt;</c> or <c>&lt;</c>, even with modern enhancements of Java 14+</p>
                        </feedback>
                    </choice>
                    <choice>
                        <statement>
                            <p>It cannot handle more than five case labels.</p>
                        </statement>
                        <feedback>
                            <p>No, there is no such limit. You can have many case labels in a <c>switch</c> statement.</p>
                        </feedback>
                    </choice>
                    <choice>
                        <statement>
                            <p>It always requires a <c>break</c> statement.</p>
                        </statement>
                        <feedback>
                            <p>Incorrect. The <c>break</c> statement is actually an optional feature of <c>switch</c>, not a limitation.</p>
                        </feedback>
                    </choice>
                    <choice correct="yes">
                        <statement>
                            <p>It can only compare a variable to constant values using equality.</p>
                        </statement>
                        <feedback>
                            <p>Correct! Java's <c>switch</c> is limited to constant comparisons using equality.</p>
                        </feedback>
                    </choice>
                </choices>
            </exercise>
        </reading-questions>
    </section>
</chapter>