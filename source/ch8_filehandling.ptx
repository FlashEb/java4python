<?xml version="1.0"?>

<!-- Generated by Docutils 0.19 -->
<chapter xml:id="filemmanipulation">
    <title>File Handling</title>

    <introduction>
        <p>
            File handling is an integral part of programming. Most programming languages have the ability to read from, write to, create, delete, move, and copy files.
        </p>
    </introduction>
    

    <section xml:id="file-class-import">
        <title>Class Imports</title>

        <p>
            Java has several libraries included for file handling, though, they must be imported. Java includes a class called <c>File</c> in the <c>io</c> library. The class can be imported with the following line. Be sure to capitalize <c>File</c>.
        </p>
        <program interactive="activecode" language="java">
            <code>
            import java.io.File;
            import java.io.IOException;public class Main {
                public static void main(String[] args) {
                    try {
                        File myFile = new File("newfile.txt");
                        myFile.createNewFile();
                        System.out.println("File Made.");
                    } catch (IOException e) {
                        System.out.println("An error occurred.");
                    }
                }
            }
            </code> 
        </program>

        <p>
            The <c>Scanner</c> class from the <c>util</c> library will need to be imported if there is any need for a program to read a file. It should be noted that this library is unnecessary if the program will not be reading any data from a file.
        </p>

        <pre>
            import java.util.Scanner; 
        </pre>

        <p>
            The <c>FileWriter</c> class can be used to write to files. In the same way that the <c>Scanner</c> class isn't needed unless the program will read from a file, the <c>FileWriter</c> class isn't needed unless the program will write to a file.
        </p>

        <pre>
            import java.io.FileWriter;
        </pre>

        <p>
            Finally, these last two classes provide error handling and must be used in tandem with the <c>File</c> class when reading from or writing to files. <c>IOException</c> handles file creation and writing errors, while <c>FileNotFoundException</c> handles errors when trying to read files. 
        </p>

        <pre>
            import java.io.IOException;
        </pre>

        <pre>
            import java.io.FileNotFoundException 
        </pre>
        
    </section>

    <section xml:id="create-file">
        <title>Creating Files</title>

        <p>
            We will now create a <c>File</c> object. It is important to create a meaningful name for the <c>File</c> object. We will call ours <c>myFile</c>.
        </p>
        <datafile label="my-file-8-2-1" filename="myfile.txt" xml:id= "my-file-8-2-1" editable="no" include-source="yes">
                <pre>
                    empty file
                </pre>
            </datafile>
        <program interactive="activecode" language="java">
            <code>
            import java.io.File;public class Main {
                public static void main(String[] args) {
                    File myFile = new File("myfile.txt");
                    System.out.println(myFile);
                }
            }
            </code> 
        </program>

        <note>
            <p>
                <c>myFile</c> is the name of the object within the program, while <c>myfile.txt</c> is the name of the file itself and will be the file name if the operation that creates the file is successful.
            </p>
        </note>

        <p>
            Now that we have created a new <c>File</c> object, we can create a file using the <c>createNewFile()</c> method from the <c>File</c> class. While the previous line of code creates an object within the program for the file, this method actually does the work of creating a file and saving it in the current working directory. This method returns a boolean value. If the method returns <c>true</c>, the file was successfully created. If the method returns <c>false</c>, there is already a file using the chosen file name. We can use this method's possible return values in tandem with an if/else selection to determine if the file was created, or if a file with that file name already exists in the directory.
        </p>

        <p>
            First, lets look at the equivalent Python code:
        </p>
        <datafile label="my-file-8-2-2" filename="myfile.txt" xml:id= "my-file-8-2-2" editable="no" include-source="yes">
                <pre>
                    empty file
                </pre>
            </datafile>
        <program interactive="activecode" language="python">
            <code>
            filename = "newfile.txt"
            print(f"Attempting to write to '{filename}' using 'w' mode...")
            try:
                with open(filename, 'w') as f:
                    f.write("This file was created using 'w' mode.")    
                    print(f"SUCCESS: The file '{filename}' was created or overwritten.")
            except Exception as e:
                # This would only catch other unexpected errors
                print(f"An unexpected error occurred during write: {e}")
            </code> 
        </program>

        <p>
            Now, let's look at Java code that accomplishes the same task:
        </p>
        <datafile label="my-file-8-2-3" filename="myfile.txt" xml:id= "my-file-8-2-3" editable="no" include-source="yes">
                <pre>
                    empty file
                </pre>
            </datafile>
        <program interactive="activecode" language="java">
            <code>
            import java.io.File;
            import java.io.IOException;

            public class CreateFile {
                public static void main(String[] args) {
                    if (myFile.createNewFile()) { // If the file was created successfully
                        System.out.println("The file " + myFile.getName() + " was created sucessfully.");
                    } else { // If a file with the file name chosen already exists
                        System.out.println("The file " + myFile.getName() + " already exists.");
                    }
                }
            }
            </code> 
        </program>

        <note>
            <p>
                You may have noticed the use of another method from the File class; <c>getName()</c>. This method returns a string containing the name of the file. 
            </p>
        </note>
    </section>
        

    <section xml:id="file-read">
        <title>Reading Files</title>

        <p>
            Let's take a look at how we can use Java to read file contents. We'll start again with library imports and building a class, this time importing the Scanner and FileNotFoundException classes. We will call this class ReadFile:
        </p>   
            <datafile label="my-file" filename="myfile.txt" xml:id= "my-file" editable="no" include-source="yes">
                <pre>
                    1
                    2
                    3
                    4
                    5
                    6
                    7
                    8
                </pre>
            </datafile>
            
        
        <program interactive="activecode"  language="java" add-files= "my-file">
            <code>
            import java.io.File;
            import java.io.FileNotFoundException;
            import java.util.Scanner;public class Main {
                public static void main(String[] args) {
                    try {
                        File myFile = new File("myfile.txt");
                        Scanner fileReader = new Scanner(myFile);            
                        System.out.println("Reading from file: " + myFile.getName());
                        while (fileReader.hasNextLine()) {
                            String data = fileReader.nextLine();
                            System.out.println(data);
                        }
                        fileReader.close(); // Close the scanner to release the file        
                    } catch (FileNotFoundException e) {
                        System.out.println("An error occurred: The file was not found.");
                        e.printStackTrace();
                    }
                }
            }
            </code> 
        </program>

        <p>
            We will then create a new File object exactly the same as the one from the section on creating files. Additionally, we will create a Scanner object. The Scanner object is the object that does the file reading. We will call this scanner fileReader:
        </p>

        <program interactive="activecode" language="java">
            <code>
            import java.io.File;
            import java.io.FileNotFoundException;
            import java.util.Scanner;
            public class Main {
                public static void main(String[] args) {        
                    // This 'try-with-resources' statement handles opening the file
                    // and guarantees it is closed automatically, which is best practice.
                    try (Scanner fileReader = new Scanner(new File("myfile.txt"))) {    

                        // If this line is reached, the file was opened successfully.
                        System.out.println("Success! The file 'myfile.txt' is now open.");

                    } catch (FileNotFoundException e) {     

                        // This block runs only if 'myfile.txt' does not exist.
                        System.out.println("Error: The file 'myfile.txt' could not be found.");        
                    }
                }
            } 
            </code> 
        </program>

        <p>
            The next lines consists of a Python code example that reads each line of the file passed to the Scanner object.:
        </p>

        <program interactive="activecode" language="python">
            <code>
                with open("filename.txt", "r") as file_reader:
                    for line in file_reader:
                        print(line.strip())
            </code>
        </program>

        <p>
            The equivalent Java code:
        </p>

        <program interactive="activecode"  language="java" add-files= "my-file">
            <code>
            import java.io.File;
            import java.io.FileNotFoundException;
            import java.util.Scanner;public class Main {
                public static void main(String[] args) {
                    String filename = "myfile.txt";
                    try (Scanner fileReader = new Scanner(new File(filename))) {
                        while (fileReader.hasNextLine()) {
                            String data = fileReader.nextLine();
                            System.out.println(data);
                        }
                    } 
                    catch (FileNotFoundException e) {
                        System.out.println("Error: The file '" + filename + "' was not found.");
                    }
                }
            }
            </code> 
        </program>

        <p>
            The <c>hasNextLine()</c> method checks checks if the line below the current line has any data. This will evaluate to true even if the next line only contains blank spaces. Within the while loop, a string variable called <c>data</c> is used to store the current line that the Scanner object is pointing to. The <c>nextLine()</c> method does two things. Firstly, it returns the current line when called. Secondly, it moves the Scanner's position to the next line. In other words, for each iteration of the while loop, each line in the text is read, stored temporarily in the data variable, and printed to the console. Finally, the <c>close()</c> method accomplishes and holds the same importance as in the section on writing to files.
        </p>
        
        <p>
            Alternatively, the following code can be used to store the all lines of myfile.txt to one variable:
        </p>

        <program interactive="activecode" language="java">
            <code>
            import java.io.File;
            import java.io.FileNotFoundException;
            import java.util.Scanner;public class Main {
                public static void main(String[] args) {
                    String filename = "myfile.txt";
                    try (Scanner fileReader = new Scanner(new File(filename))) {
                        String data = "";
                        while (fileReader.hasNextLine()) {
                            data = data + fileReader.nextLine() + System.lineSeparator();
                        }
                        System.out.println(data);
                    } 
                    catch (FileNotFoundException e) {
                        System.out.println("Error: The file '" + filename + "' was not found.");
                    }
                }
            } 
            </code> 
        </program>

        <note>
            <p>
                Pay close attention to the details of this code. <c>data</c> must be declared using an empty string or it may not work correctly within the while loop. Additionally, care must be given to reassigning <c>data</c> in the while loop. <c>data</c> is concatinated (to ensure all lines are included) with <c>fileReader.nextLine()</c> and a new line operator. Each step of this process ensures what is stored in data matches exactly what is in myfile.txt.
            </p>
        </note>

        <p>
            Using the second method of storing all file contents to one file, the resulting full code including try/catch blocks (this time using FileNotFoundException instead of IOException) will look something like this. First, the Python code:
        </p>

        <program interactive="activecode" language="python">
            <code>
                try:
                    with open("myfile.txt", "r") as file_reader:
                        data = ""
                        for line in file_reader:
                            data += line  # line already includes the newline character
                    print(data)
                except FileNotFoundError as e:
                    print("An error occurred.")
                    import traceback
                    traceback.print_exc()

            </code>
        </program>

        <p>
            And the Java equivalent:
        </p>

        <program interactive="activecode" language="java">
            <code>
            import java.io.File;
            import java.io.FileNotFoundException;
            import java.util.Scanner;

            public class ReadFile {
                public static void main(String[] args) {
                    try {
                        File myFile = new File("myfile.txt");
                        Scanner fileReader = new Scanner(myFile);
                        String data = "";
                        while (fileReader.hasNextLine()) {
                            data = data + fileReader.nextLine() + System.lineSeparator();    
                        }
                        System.out.println(data);
                        fileReader.close();
                    } catch (FileNotFoundException e) {
                        System.out.println("An error occurred.");
                        e.printStackTrace();
                    }
                }
            }
            </code> 
        </program>
        <p>
            In this code, we simply print the contents of the file to the console, but it is easy to imagine how the <c>data</c> variable could be used in conjunction with the write class created in the previous section to create a copy of myfile.txt.
        </p>
    </section>

    <section xml:id="file-write">
        <title>Writing to Files</title>

        <p>
            The <c>createNewFile()</c> method is useful for attempting to create files and reporting if the operation was successful, however, <c>createNewFile()</c> does not write anything to files it creates. In fact, if you use <c>createNewFile()</c> to create a <c>.txt</c> file and then open the file, the file will be blank.
        </p>

        <p>
            Let us create the framework for a class that will write to a file. Let's call this class <c>WriteFile</c>:
        </p>
        <datafile label="my-file-8-4-1" filename="myfile.txt" xml:id= "my-file-8-4-1" editable="yes" include-source="yes">
                <pre>
                    
                </pre>
            </datafile>
        <program interactive="activecode" language="java">
            <code>
            import java.io.File;
            import java.io.FileWriter;
            import java.io.IOException;
            import java.util.Scanner;
            public class Main {
                public static void main(String[] args) {
                    String filename = "test_file.txt";        
                    try (FileWriter writer = new FileWriter(filename)) {
                        writer.write("This line was written by the program.");
                        System.out.println("Successfully wrote to the file.");
                    } 
                    catch (IOException e) {
                        System.out.println("An error occurred during writing.");
                    }        System.out.println("--- Reading file back ---");        
                    try (Scanner reader = new Scanner(new File(filename))) {
                        while (reader.hasNextLine()) {
                            System.out.println(reader.nextLine());
                        }
                    } 
                    catch (IOException e) {
                        System.out.println("An error occurred during reading.");
                    }
                }
            }
            </code> 
        </program>
        
        <p>
            Next, we will create a <c>FileWriter</c> object. Let's call it <c>myWriter</c>:
        </p>

        <pre>
            FileWriter myWriter = new FileWriter("myfile.txt");
        </pre>

        <p>
            In this next step, we will use the <c>write()</c> method from the FileWriter class. This Method will take any data within the parenthesis and write that data to the file selected. The <c>write()</c> method takes most standard data types:
        </p>

        <pre>
            myWriter.write("File successfully updated!");
            myWriter.close();
        </pre>

        <note>
            <p>
                You may have noticed the <c>close()</c> function being used after writing to the file. This is a very important step and must be included when working with files! Without using this method, the file may remain active in system resources even after the program is closed. This can lead file corruption or other terrible problems that are best avoided!
            </p>
        </note>

        <p>
            Next, we will again add the required try/catch blocks utilizing the <c>IOException</c> class. Just like with creating files, the program will not compile without these crucial additions! We will also add some print statements to inform us of the success of the file write operation. First, a Python example:
        </p>
        <datafile label="my-file-8-4-2" filename="myfile.txt" xml:id= "my-file-8-4-2" editable="yes" include-source="yes">
                <pre>
                    
                </pre>
            </datafile>
        <program interactive="activecode" language="python">
            <code>
                with open("myfile.txt", "r") as file_reader:
                while True:
                    line = file_reader.readline()
                    if not line:  # End of file
                        break
                    print(line.strip())
            </code>
        </program>

        <p>
            And the equivalent Java code:
        </p>
        <datafile label="my-file-8-4-3" filename="myfile.txt" xml:id= "my-file-8-4-3" editable="yes" include-source="yes">
                <pre>
                    
                </pre>
            </datafile>
        <program interactive="activecode" language="java">
            <code>
            import java.io.File;
            import java.io.IOException;
            import java.util.Scanner;public class Main {
                public static void main(String[] args) {
                    String filename = "myfile.txt";
                    try (Scanner reader = new Scanner(new File(filename))) {
                        while (reader.hasNextLine()) {
                            String line = reader.nextLine();
                            System.out.println(line.trim());
                        }
                    } catch (IOException e) {
                        System.out.println("An error occurred.");
                    }
                }
            }
            </code> 
        </program>

        <p>
            And that's it! We will add our code to the foundational code for a complete program. First, an example of equivalent Python code:
        </p>
        <datafile label="my-file-8-4-4" filename="myfile.txt" xml:id= "my-file-8-4-4" editable="yes" include-source="yes">
                <pre>
                    
                </pre>
            </datafile>
        <program interactive="activecode" language="python">
            <code>
            try:
                with open("myfile.txt", "w") as my_writer:
                    my_writer.write("File successfully updated!")
                print("File successfully written to.")
            except OSError as e:
                print("An error occurred.")
                import traceback
                traceback.print_exc()
            </code> 
        </program>

        <p>
            The completed Java code:
        </p>
        <datafile label="my-file-8-4-5" filename="myfile.txt" xml:id= "my-file-8-4-5" editable="yes" include-source="yes">
                <pre>
                    
                </pre>
            </datafile>
        <program interactive="activecode" language="java">
            <code>
            import java.io.FileWriter;
            import java.io.IOException;

            public class WriteFile {
                public static void main(String[] args) {
                    try {
                        FileWriter myWriter = new FileWriter("myfile.txt");
                        myWriter.write("File successfully updated!");
                        myWriter.close();
                        System.out.println("File successfully written to.");
                    } catch (IOException e) {
                        System.out.println("An error occurred.");
                        e.printStackTrace();
                    }
                }
            }
            </code> 
        </program>

        <p>
            Files in a specific directory can be written to using the same technique as the last section in which file paths are specified, with two back slashes used in Windows environments. 
        </p>    

        <note>
            <p>
                If a file does not already exist (for example, <c>myfile.txt</c> does not exist), the <c>write()</c> method will create the file. Despite this, it is still a good idea to create separate methods or classes for creating and writing to files. Not only is it good practice to ensure methods only accomplish one thing, but the <c>createNewFile()</c> method avoids overwriting files that already exist. Imagine a file with the name <c>myfile.txt</c> already exists and contains important information. Attempting to create a file using the <c>write()</c> method will delete that data forever.
            </p>
        </note>

        <p>
            Speaking of overwriting data, what if we want to append text to the end of any text already in <c>myfile.txt</c>? To accomplish this, we can pass a boolean argument along with the file name when creating a new data argument:
        </p>

        <pre>
            FileWriter myWriter = new FileWriter("myfile.txt", true); // true enables append mode
        </pre>

        <p>
            Now, when we use <c>write()</c> method like before, the text will be appended if there is already text in the document. If we were to update our code to include the boolean argument:
        </p>
        <datafile label="my-file-8-4-6" filename="myfile.txt" xml:id= "my-file-8-4-6" editable="yes" include-source="yes">
                <pre>
                    
                </pre>
            </datafile>
        <program interactive="activecode" language="java">
            <code>
            import java.io.FileWriter;
            import java.io.IOException;

            public class WriteFile {
                public static void main(String[] args) {
                    try {
                        FileWriter myWriter = new FileWriter("myfile.txt", true); // true enables append mode
                        myWriter.write("File successfully updated!");
                        myWriter.close();
                        System.out.println("File successfully written to.");
                    } catch (IOException e) {
                        System.out.println("An error occurred.");
                        e.printStackTrace();
                    }
                }
            }
            </code> 
        </program>

        <p>
            Then if we run the program twice, the contents of <c>myfile.txt</c> would be:
        </p>

        <pre>
            File successfully updated!File successfully updated!
        </pre>

        <p>
            This doesn't look very good! If we want each additional write to appear on a new line? The first solution may be to use the <c>\n</c> newline character:
        </p>

        <pre>
            myWriter.write("File successfully updated!\n"); // Added newline character 
            myWriter.close(); 
        </pre>

        <p>
            The System.lineseseparator() method is a better solution. This method returns the system's default line separator, which is platform-dependent. For example, on Windows, it returns <c>\n</c>, while on Linux and macOS, it returns <c>\n</c>. Using this method ensures that your code works correctly across different operating systems:
        </p>

        <pre>
            myWriter.write("File successfully updated!" + System.lineseparator()); // Added newline character 
            myWriter.close();
        </pre>

        <p>
            Running it twice will result in the following contents in myfile.txt:
        </p>

        <pre>
            File successfully updated!
            File successfully updated!
        </pre>
    </section>

    <section xml:id="file-delete">
        <title>Deleting Files</title>

        <p>
            Finally, we will take a look at using Java to delete files. This one is pretty straight-forward and follows the structure used to create files. This time, however, try/catch blocks are not needed for the program to compile. We will call this class DeleteFile. The completed code should look something like this.
        </p>
        
        <program interactive="activecode" language="java">
            <code>
            import java.io.File; 

            public class DeleteFile {
                public static void main(String[] args) { 
                    File myFile = new File("myfile.txt"); 
                    if (myFile.delete()) { 
                        System.out.println("Deleted " + myFile.getName());
                    } else {
                        System.out.println("File could not be deleted.");
                    } 
                } 
            }
            </code> 
        </program>

        <p>
            This is almost identical to the code within the try block of the CreateFile class we made earlier. The main difference is the use of the <c>delete()</c> method. This method will delete any file with the name provided when creating the myFile object. Similar to the <c>createNewFile()</c> method, it will return <c>true</c> if the file existed and could be deleted, and false if the file could not be deleted. 
        </p>
    </section>

</chapter>