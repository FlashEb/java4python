<?xml version="1.0"?>

<!-- Generated by Docutils 0.19 -->
<chapter xml:id="filemmanipulation">
    <title>File Handling</title>

    <introduction>
        <p>
            File handling is an integral part of programming. Most programming languages have the ability to read from, write to, create, delete, move, and copy files.  
        </p>
    </introduction>
    

    <section xml:id="file-class-import">
        <title>Class Imports</title>

        <p>
            Before any code can be written to handle files, the proper classes must be imported. Java includes a class called File in the io library. The class can be imported with the following line. Be sure to capitalize File.
        </p>

        <program interactive="activecode" language="java">
            <code>
            import java.io.File;
            </code> <tests> </tests>
        </program>

        <p>
            This class provides a lot of functionality for file handling, however, the IOException class should also be included and used to handle file operation errors. If this class is not included and a file operation throws an exception, a compile error will occur. 
        </p>

        <program interactive="activecode" language="java">
            <code>
            import java.io.IOException;
            </code> <tests> </tests>
        </program>

        <p>
            Next, the Scanner class from the util library will need to be imported if there is any need for the program being written to read a file. It should be noted that this library is unnecessary if the program will not be reading any data from a file.
        </p>

        <program interactive="activecode" language="java">
            <code>
            import java.util.Scanner;
            </code> <tests> </tests>
        </program>

        <p>
            Finally, the FileWriter class can be used to write to files. In the same way that the Scanner class isn't needed unless the program will read from a file, the FileWriter class isn't needed unless the program will write to a file.
        </p>

        <program interactive="activecode" language="java">
            <code>
            import java.io.FileWriter;
            </code> <tests> </tests>
        </program>
        
    </section>

    <section xml:id="create-file">
        <title>Creating Files</title>
        
        <p>
            Before we can write code that creates a file, we must first import the necessary classes mentioned in the previous section (Scanner and FileWriter is not needed for a class that creates files and does nothing else) and create a class. We will call this class <c>CreateFile()</c>.
        </p>

        <program interactive="activecode" language="java">
            <code>
            import java.io.File;
            import java.io.IOException;

            public class CreateFile {
                public static void main(String[] args) {

                }
            }
            </code> <tests> </tests>
        </program>

        <p>
            Next, within the main function, we will create a File object. It is important to create a meaningful name for the File object. We will call ours <c>myFile</c>.
        </p>

        <program interactive="activecode" language="java">
            <code>
            File myFile = new File("myfile.txt");
            </code> <tests> </tests>
        </program>

        <pre>
            Note: myFile is the name of the object within the program, while "myfile.txt" 
            is the name of the file itself and will be the file name if the operation 
            that creates the file is successful.
        </pre>

        <p>
            Now that we have created a new File object, we can create a file using the <c>createNewFile()</c> method from the File class. While the previous line of code creates an object within the program for the file, this method actually does the work of creating a file and saving it in the current working directory. This method returns a boolean value. If the method returns <c>true</c>, the file was successfully created. If the method returns <c>false</c>, there is already a file using the chosen file name. We can use this method's possible return values in tandem with an if/else selection to determine if the file was created, or if a file with that file name already exists in the directory.
        </p>

        <program interactive="activecode" language="java">
            <code>
            if (myFile.createNewFile()) { // If the file was created successfully
                System.out.println("The file " + myFile.getName() + " was created sucessfully.");
            } else { // If a file with the file name chosen already exists
                System.out.println("The file " + myFile.getName() + " already exists.");
            }
            </code> <tests> </tests>
        </program>

        <pre>
            Note: You may have noticed the use of another method from the File class; 
            <c>getName()</c>. This method returns a string containing the name of 
            the file. 
        </pre>

        <p>
            The code may seem complete at this point, but if you remember from the previous section, error handling using the IOException is required for program to compile. Let's utilize best practices and add in try/catch blocks to handle exceptions thrown by the IOException class.
        </p>

        <program interactive="activecode" language="java">
            <code>
            try {
                if (myFile.createNewFile()) { // If the file was created successfully
                    System.out.println("The file " + myFile.getName() + " was created sucessfully.");
                } else { // If a file with the file name chosen already exists
                    System.out.println("The file " + myFile.getName() + " already exists.");
                }
            } catch (IOException e) {
                System.out.println("An error occurred.");
                e.printStackTrace();
            }
            </code> <tests> </tests>
        </program>

        <p>
            You may have noticed the <c>IOException e</c> part in the parenthesis next to the catch. This creates a variable called <c>e</c> that refers to an IOException object. In other words, <c>e</c> refers to the error created if the <c>try</c> block fails. The line <c>e.printStackTrace();</c> prints the stack trace to the console. This is what the console may output if the program tries to create a file, but is blocked by the Operating System due to insufficient permissions:
        </p>

        <program language="$">
            <input>
            An error occurred.
            java.io.IOException: Permission denied
                at java.base/java.io.File.createNewFile(File.java:1040)
                at CreateFile.main(CreateFile.java:7)

            </input>
        </program>

        <p>
            At this point, the program will function correctly. Let's add the try/catch blocks to the foundational code written before to get a complete program:
        </p>

        <program interactive="activecode" language="java">
            <code>
            import java.io.File;
            import java.io.IOException;

            public class CreateFile {
                public static void main(String[] args) {
                    try {
                        File myFile = new File("myfile.txt");
                        if (myFile.createNewFile()) { // If the file was created successfully
                            System.out.println("The file " + myFile.getName() + " was created sucessfully.");
                        } else { // If a file with the file name chosen already exists
                            System.out.println("The file " + myFile.getName() + " already exists.");
                        }
                    } catch (IOException e) {
                        System.out.println("An error occurred.");
                        e.printStackTrace();
                    }

                }
            }
            </code> <tests> </tests>
        </program>

        <p>
            You may be wondering: "What if I don't want to create a file in the current working directory?" Good question! In Windows environments, you can specify the file path using two back slashes for each back slash in the file path. For each pair of back slashes, the first backslash acts as an escape character. So, if you want to save a file to this directory:
        </p>

        <pre>
            C:\Users\UserName\Documents
        </pre>

        <p>
            The line of code that creates a File object will look like this:
        </p>

        <program interactive="activecode" language="java">
            <code>
            File myFile = new File("C:\\Users\\UserName\\Documents\\myfile.txt");
            </code> <tests> </tests>
        </program>

        <p>
            If you are working in a Linux or Apple environment, you can simply use the file path with single forward slashes:
        </p>

        <program interactive="activecode" language="java">
            <code>
            File myFile = new File("/home/UserName/Documents/myfile.txt");
            </code> <tests> </tests>
        </program>
    </section>

    <section xml:id="file-write">
        <title>Writing to Files</title>

        <p>
            The <c>createNewFile()</c> method is useful for attempting to create files and reporting if the operation was successful, however, createNewFile() does not write anything to files it creates. In fact, if you use <c>createNewFile()</c> to create a .txt file and then open the file, the file will be blank.
        </p>

        <p>
            To write to a file, we will need to create a different class. We will do the same setup as the previous section. First, we will import the classes (File and Scanner are not needed) and create the framework for a class that will write to a file. Let's call this class <c>WriteFile</c>:
        </p>

        <program interactive="activecode" language="java">
            <code>
            import java.io.FileWriter;
            import java.io.IOException;

            public class WriteFile {
                public static void main(String[] args) {

                }
            }
            </code> <tests> </tests>
        </program>
        
        <p>
            Next, we will create a FileWriter object. Let's call it myWriter:
        </p>

        <program interactive="activecode" language="java">
            <code>
            FileWriter myWriter = new FileWriter("myFile.txt");
            </code> <tests> </tests>
        </program>

        <p>
            In this next step, we will use the <c>write()</c> method from the FileWriter class. This Method will take any data within the parenthesis and write that data to the file selected. The write() method takes most standard data types:
        </p>

        <program interactive="activecode" language="java">
            <code>
            myWriter.write("File successfully updated!");
            myWriter.close();
            </code> <tests> </tests>
        </program>

        <p>
            You may have noticed the <c>close()</c> function being used after writing to a file. This is a very important step and must be included when working with files! Without using this method, the file may remain active in system resources even after the program is closed. This can lead file corruption or other terrible problems that are best avoided!
        </p>

        <p>
            Next, we will again add the required try/catch blocks utilizing the IOException class. Just like with creating files, the program will not compile without these crucial additions! We will also add some print statements to inform us of the success of the file write operation:
        </p>

        <program interactive="activecode" language="java">
            <code>
            try {
                FileWriter myWriter = new FileWriter("myFile.txt");
                myWriter.write("File successfully updated!");
                myWriter.close();
                System.out.println("File successfully written to.");
            } catch (IOException e) {
                System.out.println("An error occurred.");
                e.printStackTrace();
            }
            </code> <tests> </tests>
        </program>

        <p>
            And that's it! We will add our code to the foundational code for a complete program.
        </p>

        <program interactive="activecode" language="java">
            <code>
            import java.io.FileWriter;
            import java.io.IOException;

            public class WriteFile {
                public static void main(String[] args) {
                    try {
                        FileWriter myWriter = new FileWriter("myFile.txt");
                        myWriter.write("File successfully updated!");
                        myWriter.close();
                        System.out.println("File successfully written to.");
                    } catch (IOException e) {
                        System.out.println("An error occurred.");
                        e.printStackTrace();
                    }
                }
            }
            </code> <tests> </tests>
        </program>

        <p>
            Files in a specific directory can be written to using the same technique as the last section in which file paths are specified, with two back slashes used in Windows environments. Something to note is, if a file does not already exist (for example, myfile.txt does not exist), the <c>write()</c> method will create the file. Despite this, it is still a good idea to create separate methods or classes for creating and writing to files. Not only is it good practice to ensure methods only accomplish one thing, but the <c>createNewFile()</c> method avoids overwriting files that already exist. Imagine a file with the name myfile.txt already exists and contains important information. Attempting to create a file using the <c>write()</c> method will delete that data forever.
        </p>

        <p>
            Speaking of overwriting data, it is important to know that the <c>write()</c> method will overwrite any text if there is already text in myfile.txt. What if we want to append text to the end of any text already in myfile.txt? To accomplish this, we can pass a boolean argument along with the file name when creating a new data argument:
        </p>

        <program interactive="activecode" language="java">
            <code>
            FileWriter myWriter = new FileWriter("myfile.txt", true); // true enables append mode
            </code> <tests> </tests>
        </program>

        <p>
            Now, when we use <c>write()</c> method like before, the text will be appended if there is already text in the document. If we were to update our code to include the boolean argument:
        </p>

        <program interactive="activecode" language="java">
            <code>
            import java.io.FileWriter;
            import java.io.IOException;

            public class WriteFile {
                public static void main(String[] args) {
                    try {
                        FileWriter myWriter = new FileWriter("myFile.txt", true); // true enables append mode
                        myWriter.write("File successfully updated!");
                        myWriter.close();
                        System.out.println("File successfully written to.");
                    } catch (IOException e) {
                        System.out.println("An error occurred.");
                        e.printStackTrace();
                    }
                }
            }
            </code> <tests> </tests>
        </program>

        <p>
            and then run the program twice, the contents of myfile.txt would be:
        </p>

        <program language="$">
            <code>
            File successfully updated!File successfully updated!
            </code> <tests> </tests>
        </program>

        <p>
            This doesn't look very good! There is no space between the first and second sentences! We can make this look a little better by simply adding a space after the exclamation mark in the string:
        </p>

        <program interactive="activecode" language="java">
            <code>
            myWriter.write("File successfully updated! "); // Added space at end
            myWriter.close();
            </code> <tests> </tests>
        </program>

        <p>
            This works fine if you want all text to be on the same line, but what if we want each additional write to appear on a new line? The first answer may be to use the <c>\n</c> newline character:
        </p>

        <program interactive="activecode" language="java">
            <code>
            myWriter.write("File successfully updated!\n"); // Added newline character 
            myWriter.close();
            </code> <tests> </tests>
        </program>
            
        <p>
            This would work fine most of the time, but older Windows programs and operating systems use the <c>\r\n</c> newline character. To ensure the text appears on a new line regardless of what system the code is running on, concatenate the string with the <c>System.lineSeparator()</c> method:
        </p>

        <program interactive="activecode" language="java">
            <code>
            myWriter.write("File successfully updated!" + System.lineseparator()); // Added newline character 
            myWriter.close();
            </code> <tests> </tests>
        </program>

        <p>
            Running either variation used for adding new lines twice will result in the following contents in myfile.txt. Notice that an extra blank line that will always appear at the bottom of the text:
        </p>

        <program language="$">
            <code>
            File successfully updated!
            File successfully updated!

            </code> <tests> </tests>
        </program>

    </section>

</chapter>